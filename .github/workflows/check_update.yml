name: Release New Version

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

jobs:
  create_release:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch latest release info
        id: get_release_info
        run: |
          API_URL="https://api.getgrass.io/storeLatestInstaller?input=%7B%22item%22:%22desktop%22%7D"
          RESPONSE=$(curl -s $API_URL)
          VERSION=$(echo $RESPONSE | jq -r '.result.data.version')
          PUB_DATE=$(echo $RESPONSE | jq -r '.result.data.pub_date')

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "PUB_DATE=$PUB_DATE" >> $GITHUB_ENV
          {
            echo "NOTES<<EOF"
            echo "Published on: $PUB_DATE"
            echo ""
            echo "**Download links:**"
            for PLATFORM in $(echo $RESPONSE | jq -r '.result.data.platforms | keys[]'); do
              URL=$(echo $RESPONSE | jq -r ".result.data.platforms[\"$PLATFORM\"].url")
              echo "- **$PLATFORM:** [Link]($URL)"
            done
            echo "EOF"
          } >> $GITHUB_ENV

      - name: Check if release exists
        id: check_release
        run: |
          if gh release view $VERSION; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: env.RELEASE_EXISTS == 'false'
        run: |
          gh release create $VERSION \
            --title "Release $VERSION" \
            --notes "$NOTES" \
            --target main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download and upload release assets
        if: env.RELEASE_EXISTS == 'false'
        run: |
          API_URL="https://api.getgrass.io/storeLatestInstaller?input=%7B%22item%22:%22desktop%22%7D"
          RESPONSE=$(curl -s $API_URL)
          
          PLATFORMS=$(echo $RESPONSE | jq -r '.result.data.platforms | to_entries | map("\(.value.url)") | join(" ")')
          
          for URL in $PLATFORMS; do
            FILENAME=$(basename $URL)
            curl -L -o $FILENAME $URL
            gh release upload $VERSION $FILENAME
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - name: Send message to Telegram
#        uses: akeylimepie/telegram-action@main
#        with:
#          token: ${{ secrets.TELEGRAM_TOKEN }}
#          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
#          message_thread_id: ${{ secrets.TELEGRAM_MESSAGE_THREAD_ID }}
#          text: |
#            New version ${{ env.VERSION }} released!
#            Published on: ${{ env.PUB_DATE }}